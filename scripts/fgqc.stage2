#!/bin/bash

# == Configuration variables
#
# APT proxy server
apt_server='http://apt.shop.lan:3142'

# URL to upload buildsheets and lshw reports to
report_server='http://build.shop.lan/scripts/upload.cgi'

# == Helper functions
#
function agi() {
  apt-get -o "Acquire::http::Proxy=${apt_server}" --assume-yes \
    install $*
}

function agr() {
  apt-get -o "Acquire::http::Proxy=${apt_server}" --assume-yes \
    remove $*
}

DIA="dialog --backtitle FREEGEEKCENTREFORMACHINEQUALITYCONTROL"

function msg() {
  $DIA --msgbox "$1" 19 70
}
function msg2() {
  $DIA --title "$1" --no-collapse --msgbox "$2" 19 70
}
function info() {
  $DIA --infobox "$1" 19 70
}
function yesno() {
  $DIA --defaultno --yesno "$1" 19 70
}
function fail() {
  msg FAIL "$1 $2"
}
function pass() {
  msg2 PASS "$1 passed"
}

# == QC test functions
#
function qc_3d() {
  glxgears
}

function qc_audio() {
  msg "We are going to play sound.  Make sure you have speakers or headphones plugged in."
  if [ -f "/usr/share/sounds/purple/alert.wav" ]; then
    aplay /usr/share/sounds/purple/alert.wav
  elif [ -f "/usr/share/sounds/alsa/Front_Center.wav" ]; then
    aplay /usr/share/sounds/alsa/Front_Center.wav
    aplay /usr/share/sounds/alsa/Rear_Right.wav
  else
    msg "Error: There is no sound to play"
  fi
  yesno "Did you hear sound?" && return
  yesno "Try to play sound again?" && qc_audio
  return 1
}

function qc_cpu() {
  msg2 cpu "$(cat /proc/cpuinfo)"
}

function qc_floppy() {
  msg "insert a floppy to be formatted (/dev/fd0)"
  if fdformat /dev/fd0 2> /tmp/qcflop
  then
    pass "floppy"
  else
    fail "floppy" "$(cat /tmp/qcflop)"
  fi
}

function qc_hdd() {
  msg2 hdd "$(fdisk -l | grep '^Disk /dev')"
}

function qc_lshw() {
  lshw |grep '*-\|vendor:\|product:\|capabilities:' | less
}

function qc_mobo() {
  msg2 mobo "$(lshw -C bus)"
}

function qc_network() {
  if ping -c 4 www.google.com
  then
    pass "network"
  else
    fail "network"
  fi
}

function qc_optical() {
  msg "For each optical drive in the system, insert the appropriate media and make sure it shows up on the desktop.  Put a CDROM in a CDROM/RW drive and a DVDROM in a DVDROM/RW drive."
}

function qc_os() {
  . /etc/lsb-release
  msg2 os " $(dpkg --print-architecture) $(echo $DISTRIB_DESCRIPTION)"
}

function qc_ram() {
  msg2 ram "$(lshw -short -C memory)"
  msg "Remember to run a memtest when finished this program"
}

function qc_stress() {
  stress_seconds=180
  msg "We're going to stress test the machine now"
  stress --cpu 10 --io 4 --vm 10 --vm-bytes 10M --hdd 2 \
    --timeout $stress_seconds --quiet &
  perl <<EOF | $DIA --gauge "${stress_seconds} seconds of stress test" 8 70
\$|=1;
\$i=0;
while (\$i<${stress_seconds})
{
  print int(\$i++/${stress_seconds}*100),qq(\\n);
  sleep 1;
}
EOF

  msg "Stress test complete"
}

function qc_upgrade() {
  export http_proxy="http://apt.shop.lan:3142/"
  aptitude update

  aptitude install -y `check-language-support`
  aptitude safe-upgrade -y && pass "upgrade"
  unset http_proxy
}

function qc_usb() {
  msg "Plug a USB mouse into each port and move the mouse around to make sure it works.  Press ENTER when finished"
}

function qc_video() {
  msg2 video "$(lspci | grep -i vga)"
  msg "We're gonna play video now"
  if [ -f "/usr/share/example-content/Experience ubuntu.ogg" ]; then
    totem "/usr/share/example-content/Experience ubuntu.ogg"
  elif [ -f "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/SpiritOfUbuntu.ogv" ]; then
    totem "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/SpiritOfUbuntu.ogv"
  elif [ -f "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/UbuntuIsHumanity.ogv" ]; then
    totem "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/UbuntuIsHumanity.ogv"
  elif [ -f "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/How fast.ogg" ]; then
    totem "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/How fast.ogg"
  else
    msg "Error: There is no video to play!"
  fi
  yesno "Did you see video?" && return
  yesno "Try to play video again?" && qc_video
  return 1
}

# == Other functions
#
function makefiles() {
  if [ ! -d /var/lib/fgqc ]
  then
    mkdir /var/lib/fgqc
  fi

  if [ ! -f /var/lib/fgqc/system-id ]
  then
    uuid -v1 > /var/lib/fgqc/system-id
  fi

  if [ ! -d  /etc/skel/Desktop/"Read Me First"  ] ; then
    echo "Creating freegeek docs"
    mkdir -p  /usr/share/doc/freegeek
    wget --no-proxy -O "/usr/share/doc/freegeek/resource page free at heart.odt" \
      'http://preseed.shop.lan/docs/resource page free at heart.odt' || \
      msg "ALERT" "Documentation download failed, please alert your build instructor"
    wget --no-proxy -O '/usr/share/doc/freegeek/bringing home your computer.odt' \
      'http://preseed.shop.lan/docs/bringing home your computer.odt' || \
      msg "ALERT" "Documentation download failed, please alert your build instructor"
    cp -r /usr/share/doc/freegeek "${HOME}/Desktop/Read Me First"
    chown -R "${SUDO_USER-$USER}" "${HOME}/Desktop/Read Me First"
    mkdir /etc/skel/Desktop
    cp -a /usr/share/doc/freegeek "/etc/skel/Desktop/Read Me First"
  else
    echo "Freegeek docs already created."
  fi
}

function prepare() {
  agi curl dialog mesa-utils stress uuid
}

function report_lshw() {
  lshw -html > /var/lib/fgqc/lshw.html 2>/dev/null
  curl -F "sysid=@/var/lib/fgqc/system-id" \
    -F "file=@/var/lib/fgqc/lshw.html" \
    "${report_server}" > /dev/null 2>&1
}

# == The main script
#

# make sure we have the privileges to write to disks
if [ $(id -u) != 0 ]; then
  exec sudo $0
fi

prepare || exit 1

makefiles
report_lshw &

$DIA --inputbox "Enter your volunteer number: " 8 40 2>/tmp/choice || exit 1
DIA="${DIA}___$(cat /tmp/choice)"

defaultitem="cpu"

while :
do
  $DIA --default-item $defaultitem --cancel-label "Finish" --ok-label "Test" \
    --menu "Tests" 21 70 20 \
    upgrade "Upgrade packages" \
    cpu "show cpuinfo" \
    mobo "show motherboard info" \
    ram "show ram info" \
    os "Operating system version" \
    video "play video" \
    3d "Test 3D capability" \
    hdd "show Hard Drive Info" \
    optical "Test CDROM/DVDROM" \
    floppy "Test floppy drive" \
    network "Test network" \
    audio "Play audio" \
    usb "Test usb device" \
    lshw "Show lshw output" \
    stress "Stress test machine" \
    2> /tmp/choice || break
  defaultitem=$(cat /tmp/choice)
  qc_$(cat /tmp/choice)
done
