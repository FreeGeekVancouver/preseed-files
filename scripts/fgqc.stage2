#!/bin/bash

# $Log: fgqc.stage2,v $
# Revision 1.2  2009/02/15 21:45:40  root
# now does auto-add of readme first  files .
#

export http_proxy="http://apt.shop.lan:3142/"
agi="apt-get install --assume-yes"
agr="apt-get remove --assume-yes"

# make sure we have the privileges to write to disks
if [ $(id -u) != 0 ]; then
    echo $0: must be root, exiting
    exit 1
fi

function prepare() {
	$agi dialog mesa-utils
}

DIA="dialog --backtitle FREEGEEKCENTREFORMACHINEQUALITYCONTROL"

function msg() {
    $DIA --msgbox "$1" 19 70
}
function msg2() {
    $DIA --title "$1" --no-collapse --msgbox "$2" 19 70
}
function info() {
    $DIA --infobox "$1" 19 70
}
function yesno() {
    $DIA --defaultno --yesno "$1" 19 70
}

function qc_stress() {
    stress_seconds=180
    msg "We're gonna stress test the machine now"
    info "Running $stress_seconds of stress testing..."
    $agi stress || return 1
    echo -ne "\n\nRunning stress test for $stress_seconds seconds..."
    stress --cpu 10 --io 4 --vm 10 --vm-bytes 10M --hdd 2 --timeout $stress_seconds --quiet || return 1
    msg "Is the machine still responding?"
    $agr stress || return 1
}

function qc_audio() {
    msg "We are going to play sound.  Make sure you have speakers or headphones plugged in."
    if [ -f "/usr/share/sounds/purple/alert.wav" ]; then
       aplay /usr/share/sounds/purple/alert.wav
    elif [ -f "/usr/share/sounds/alsa/Front_Center.wav" ]; then
       aplay /usr/share/sounds/alsa/Front_Center.wav
    else
       msg "Error: There is no sound to play"
    fi
    yesno "Did you hear sound?" && return
    yesno "Try to play sound again?" && qc_audio
    return 1
}

function qc_3d() {
    glxgears
}

function qc_usb() {
    msg "Plug a USB mouse into each port and move the mouse around to make sure it works.  Press ENTER when finished"
}

function qc_video() {
    msg2 video "$(lspci | grep -i vga)"
    msg "We're gonna play video now"
    if [ -f "/usr/share/example-content/Experience ubuntu.ogg" ]; then
        totem "/usr/share/example-content/Experience ubuntu.ogg"
    elif [ -f "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/SpiritOfUbuntu.ogv" ]; then
        totem "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/SpiritOfUbuntu.ogv"
    elif [ -f "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/UbuntuIsHumanity.ogv" ]; then
	totem "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/UbuntuIsHumanity.ogv"
    elif [ -f "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/How fast.ogg" ]; then
        totem "/usr/share/example-content/Ubuntu_Free_Culture_Showcase/How fast.ogg"
    else
        msg "Error: There is no video to play!"
    fi
    yesno "Did you see video?" && return
    yesno "Try to play video again?" && qc_video
    return 1
}

function qc_all() {
    qc_audio
    qc_video
    qc_stress
}

function qc_ram() {
    msg2 ram "$(lshw -short -C memory)"
    msg "Remember to run a memtest when finished this program"
}

function qc_mobo() {
    msg2 mobo "$(lshw -C bus)"
}

function qc_cpu() {
    msg2 cpu "$(cat /proc/cpuinfo)"
}

function qc_hdd() {
    msg2 hdd "$(fdisk -l | grep '^Disk /dev')"
}

function qc_os() {
    . /etc/lsb-release
    msg2 os " $(dpkg --print-architecture) $(echo $DISTRIB_DESCRIPTION)"
}

function qc_network() {
    if ping -c 4 www.google.com
    then
	pass "network"
    else
	fail "network"
    fi
}

function qc_floppy() {
    msg "insert a floppy to be formatted (/dev/fd0)"
    if fdformat /dev/fd0 2> /tmp/qcflop
    then
	pass "floppy"
    else
	fail "floppy" "$(cat /tmp/qcflop)"
    fi
}

function qc_optical() {
    msg "For each optical drive in the system, insert the appropriate media and make sure it shows up on the desktop.  Put a CDROM in a CDROM/RW drive and a DVDROM in a DVDROM/RW drive."
}

function qc_upgrade() {
    export http_proxy="http://apt.shop.lan:3142/"
    aptitude update

    aptitude install -y `check-language-support`
    aptitude safe-upgrade -y && pass "upgrade"
    unset http_proxy
}

function fail() {
    msg FAIL "$1 $2"
}
function pass() {
    msg2 PASS "$1 passed"
}

function makefiles() {
if [ ! -d  /etc/skel/Desktop/"Read Me First"  ] ; then
	echo  creating freegeek docs
	mkdir -p  /usr/share/doc/freegeek
# bringing home your computer.odt
# resource page free at heart.odt
#	base64 --decode > /usr/share/doc/freegeek/"resource page free at heart.odt"  <<EOF
	wget --no-proxy -O "/usr/share/doc/freegeek/resource page free at heart.odt" \
	  preseed.shop.lan/docs/resource\ page\ free\ at\ heart.odt
#	base64 --decode > /usr/share/doc/freegeek/"bringing home your computer.odt"  <<EOF
	wget --no-proxy -O '/usr/share/doc/freegeek/bringing home your computer.odt' \
	  'preseed.shop.lan/docs/bringing home your computer.odt'
	cp -r /usr/share/doc/freegeek Desktop/"Read Me First"
	chown -R "${SUDO_USER-$USER}" Desktop/"Read Me First"
	mkdir /etc/skel/Desktop
	cp -a /usr/share/doc/freegeek /etc/skel/Desktop/"Read Me First"
else
	echo freegeek docs already created.
fi
}
prepare || exit 1

makefiles

$DIA --inputbox "Enter your volunteer number: " 8 40 2>/tmp/choice || exit 1
DIA="${DIA}___$(cat /tmp/choice)"

defaultitem="all"

while :
do
    $DIA --default-item $defaultitem --cancel-label "Finish" --ok-label "Test" \
	--menu "Tests" 21 70 20 \
	upgrade "Upgrade packages" \
	cpu "show cpuinfo" \
	mobo "show motherboard info" \
	ram "show ram info" \
	os "Operating system version" \
        video "play video" \
	3d "Test 3D capability" \
	hdd "show Hard Drive Info" \
	optical "Test CDROM/DVDROM" \
	floppy "Test floppy drive" \
	network "Test network" \
	audio "Play audio" \
	usb "Test usb device" \
	stress "Stress test machine" \
	2> /tmp/choice || break
    defaultitem=$(cat /tmp/choice)
    qc_$(cat /tmp/choice)
done
